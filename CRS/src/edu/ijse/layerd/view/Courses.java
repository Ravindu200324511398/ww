/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.layerd.view;

import edu.ijse.layerd.dto.CourseDetailsDto;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import edu.ijse.layerd.controller.CourseDetailsController;
import edu.ijse.layerd.controller.EnrollmentController;
import edu.ijse.layerd.db.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;

/**
 *
 * @author ravindusaranga
 */
public class Courses extends javax.swing.JFrame {

    private CourseDetailsController courseDetailsController = new CourseDetailsController();
    private EnrollmentController enrollmentController = new EnrollmentController();
    private String StudentID;
    private int seatsAvailable;


    /**
     * Creates new form Courses
     */
    public Courses(String StudentID) {
        this.StudentID = StudentID;
        initComponents();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        btnAddCourse = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Impact", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Courses List");

        tblCourses.setFont(new java.awt.Font("Impact", 1, 14)); // NOI18N
        tblCourses.setForeground(new java.awt.Color(204, 204, 204));
        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCourses);

        btnAddCourse.setFont(new java.awt.Font("Impact", 1, 14)); // NOI18N
        btnAddCourse.setForeground(new java.awt.Color(102, 102, 102));
        btnAddCourse.setText("Add Course");
        btnAddCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCourseActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Impact", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(102, 102, 102));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 1010, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(btnAddCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(200, 200, 200))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        dispose();
        new RegisteredCourses(StudentID).setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCourseActionPerformed
         int selectedRow = tblCourses.getSelectedRow();
        if (selectedRow >= 0) {
            String CourseID = tblCourses.getValueAt(selectedRow, 0).toString();
            int seatsAvailable = Integer.parseInt(tblCourses.getValueAt(selectedRow, 5).toString());

            System.out.println("Selected CourseID: " + CourseID);
            System.out.println("Seats Available: " + seatsAvailable);

            if (seatsAvailable > 0) {
                try {
                    boolean isEnrolled = enrollmentController.isStudentEnrolled(StudentID, CourseID);
                    System.out.println("Enrollment Check: StudentID=" + StudentID + ", CourseID=" + CourseID + ", isEnrolled=" + isEnrolled);
                    
                    if (isEnrolled) {
                        JOptionPane.showMessageDialog(this, "You are already enrolled in this course.", "Info", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }

                    boolean enrolled = enrollmentController.enrollStudent(StudentID, CourseID);
                    System.out.println("Enrollment Success: " + enrolled);

                    if (enrolled) {
                        boolean updated = updateCourseCapacity(CourseID, seatsAvailable - 1);
                        System.out.println("Course Capacity Updated: " + updated);
                        
                        if (updated) {
                            JOptionPane.showMessageDialog(this, "Course successfully added!", "Success", JOptionPane.INFORMATION_MESSAGE);
                            loadTable();
                            new RegisteredCourses(StudentID).setVisible(true);
                            dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "Failed to update course capacity.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to add course. Try again.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "No seats available for this course!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a course to add.", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnAddCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCourse;
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourses;
    // End of variables declaration//GEN-END:variables
public void loadTable() {
         try {
            System.out.println("Loading course list...");
            String[] columns = {"CourseID", "Title", "Credit Hours", "Department", "Prerequisites", "Max Enrollment"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            tblCourses.setModel(dtm);

            ArrayList<CourseDetailsDto> courses = courseDetailsController.getAllCourses();
            for (CourseDetailsDto course : courses) {
                Object[] rowData = {course.getCourseID(), course.getTitle(), course.getCreditHours(), course.getDepartment(), course.getPrerequisites(), course.getMaxEnrollmentCapacity()};
                dtm.addRow(rowData);
            }

            tblCourses.repaint();
            tblCourses.revalidate();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    private void tblCoursesMouseClicked(java.awt.event.MouseEvent evt) {
          int selectedRow = tblCourses.getSelectedRow();
    if (selectedRow >= 0) {
        String CourseID = tblCourses.getValueAt(selectedRow, 0).toString();
        int seatsAvailable = Integer.parseInt(tblCourses.getValueAt(selectedRow, 5).toString());

        if (seatsAvailable > 0) {
            try {
                boolean isEnrolled = enrollmentController.isStudentEnrolled(StudentID, CourseID);
                if (isEnrolled) {
                    JOptionPane.showMessageDialog(this, "You are already enrolled in this course.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }

                if (enrollmentController.enrollStudent(StudentID, CourseID)) {
                    JOptionPane.showMessageDialog(this, "Course successfully added!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    loadTable(); // Refresh table to reflect new seat count
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to add course. Try again.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No seats available for this course!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

        
    }

    public boolean updateCourseCapacity(String courseID, int newcapcity) {
    String query = "UPDATE course_details SET MaxEnrollmentCapacity = ? WHERE CourseID = ?";
        try (Connection conn = DBConnection.getInstance().getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, newcapcity);
            stmt.setString(2, courseID);

            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
}


}
