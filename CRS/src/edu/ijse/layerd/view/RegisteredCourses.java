/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.layerd.view;

import java.sql.Connection;
import edu.ijse.layerd.db.DBConnection;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;

/**
 *
 * @author ravindusaranga
 */
public class RegisteredCourses extends javax.swing.JFrame {
    private String StudentID;

    public RegisteredCourses(String StudentID) { // Accept StudentID
        this.StudentID = StudentID; // Store the StudentID
        initComponents();
        loadRegisteredCourses(); // Load courses based on this StudentID
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        btnAddCourse = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnDropCourse2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Impact", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Registered Courses");

        tblCourses.setFont(new java.awt.Font("Impact", 1, 14)); // NOI18N
        tblCourses.setForeground(new java.awt.Color(204, 204, 204));
        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCourses);

        btnAddCourse.setFont(new java.awt.Font("Impact", 1, 18)); // NOI18N
        btnAddCourse.setForeground(new java.awt.Color(102, 102, 102));
        btnAddCourse.setText("Add Course");
        btnAddCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCourseActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Impact", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(102, 102, 102));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDropCourse2.setFont(new java.awt.Font("Impact", 1, 18)); // NOI18N
        btnDropCourse2.setForeground(new java.awt.Color(102, 102, 102));
        btnDropCourse2.setText("Drop Course");
        btnDropCourse2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropCourse2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1437, Short.MAX_VALUE)
                .addGap(28, 28, 28))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAddCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDropCourse2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(138, 138, 138))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDropCourse2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(203, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCourseActionPerformed
        dispose();
        new Courses(StudentID).setVisible(true);
    }//GEN-LAST:event_btnAddCourseActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        dispose();
        new StudentDashboard().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDropCourse2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropCourse2ActionPerformed
        int selectedRow = tblCourses.getSelectedRow();
        if (selectedRow != -1) {
            String courseID = (String) tblCourses.getValueAt(selectedRow, 0);
            dropCourse(courseID);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a course to drop.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDropCourse2ActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCourse;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDropCourse2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCourses;
    // End of variables declaration//GEN-END:variables


      
private void dropCourse(String CourseID) {
    String deleteQuery = "DELETE FROM Enrollment WHERE StudentID = ? AND CourseID = ?";
    String updateQuery = "UPDATE Course_Details SET MaxEnrollmentCapacity = MaxEnrollmentCapacity + 1 WHERE CourseID = ?";

    try (
        Connection conn = DBConnection.getInstance().getConnection();
        PreparedStatement pstmtDelete = conn.prepareStatement(deleteQuery);
        PreparedStatement pstmtUpdate = conn.prepareStatement(updateQuery)
    ) {
        // Delete the enrollment record
        pstmtDelete.setString(1, StudentID);
        pstmtDelete.setString(2, CourseID);
        int rowsDeleted = pstmtDelete.executeUpdate();
        
        if (rowsDeleted > 0) {
            // If course is successfully dropped, update MaxEnrollmentCapacity
            pstmtUpdate.setString(1, CourseID);
            pstmtUpdate.executeUpdate();  // Increase MaxEnrollmentCapacity by 1
            
            JOptionPane.showMessageDialog(this, "Course dropped successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadRegisteredCourses(); // Refresh table after dropping the course
        } else {
            JOptionPane.showMessageDialog(this, "Failed to drop course.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    
   

    

    private void loadRegisteredCourses() {
    String query = "SELECT c.CourseID, c.Department, c.Title " +
                   "FROM Course_Details c " +
                   "JOIN Enrollment e ON c.CourseID = e.CourseID " +
                   "WHERE e.StudentID = ?";

    DefaultTableModel model = new DefaultTableModel();
    model.setColumnIdentifiers(new String[]{"CourseID", "Department", "Title"}); // Set column headers
    
    try (Connection conn = DBConnection.getInstance().getConnection();
         PreparedStatement pstmt = conn.prepareStatement(query)) {

        pstmt.setString(1, this.StudentID); // Use the stored StudentID

        try (ResultSet rs = pstmt.executeQuery()) {
            while (rs.next()) {
                String CourseID = rs.getString("CourseID");
                String Department = rs.getString("Department");
                String Title = rs.getString("Title");

                // Add row to model
                model.addRow(new Object[]{CourseID, Department, Title});
            }
        }

        // Set model to table
        tblCourses.setModel(model);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Database Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

}